import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:mapbox_maps_flutter/mapbox_maps_flutter.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:http/http.dart' as http;
import 'package:elex_driver/core/keys/mapbox_token.dart';

class MapProvider extends ChangeNotifier {
  MapboxMap? mapboxMap;

  // Points for pickup and destination
  Point pickupPoint = Point(coordinates: Position(38.7072, 9.0508));
  Point destinationPoint = Point(coordinates: Position(38.8272, 9.0208));

  // Midpoint values
  double? _midLng;
  double? _midLat;

  double? get midLng => _midLng;
  double? get midLat => _midLat;

  void onMapCreated(MapboxMap mapboxMap) {
    this.mapboxMap = mapboxMap;
    _showUserLocation();
    _addPointsAndRoute();
    _calculateMidpoint(); // Calculate midpoint when the map is created
  }

  void updatePickupPoint(Position position) {
    pickupPoint = Point(coordinates: position);
    _calculateMidpoint(); // Recalculate midpoint when pickup point changes
    notifyListeners(); // Notify listeners to update the UI
  }

  void updateDestinationPoint(Position position) {
    destinationPoint = Point(coordinates: position);
    _calculateMidpoint(); // Recalculate midpoint when destination point changes
    notifyListeners(); // Notify listeners to update the UI
  }

  void _calculateMidpoint() {
    _midLng =
        (pickupPoint.coordinates.lng + destinationPoint.coordinates.lng) / 2;
    _midLat =
        (pickupPoint.coordinates.lat + destinationPoint.coordinates.lat) / 2;
  }

  Future<void> _showUserLocation() async {
    var status = await Permission.locationWhenInUse.request();
    if (status.isGranted && mapboxMap != null) {
      // Load the custom icon from assets
      final ByteData bytes =
          await rootBundle.load('assets/images/location.png');
      final Uint8List list = bytes.buffer.asUint8List();

      mapboxMap!.location.updateSettings(
        LocationComponentSettings(
          enabled: true,
          pulsingEnabled: true,
          showAccuracyRing: true,
          accuracyRingBorderColor: Colors.blue.value,
          pulsingColor: Colors.blue.value,
          locationPuck: LocationPuck(
            locationPuck2D: LocationPuck2D(
              topImage: list, // Set the custom icon here

              bearingImage: null,
              shadowImage: null,
              scaleExpression: null,
            ),
          ),
        ),
      );
    }
  }

  Future<void> _addPointsAndRoute() async {
    if (mapboxMap == null) return;

    // Load the custom icon from assets
    final ByteData bytes = await rootBundle.load('assets/images/location.png');
    final Uint8List list = bytes.buffer.asUint8List();
    final MbxImage customImage = MbxImage(
      width: 10,
      height: 10,
      data: list,
    );
    //! Add the custom image to the map style
    // await mapboxMap!.style.addStyleImage(
    //   'custom-icon', // Image ID
    //   1.0, // Scale
    //   customImage, // Image data
    //   false, // SDF
    //   [], // Stretch X
    //   [], // Stretch Y
    //   null, // Content
    // );
    // Add pickup point
    // await mapboxMap!.style.addSource(GeoJsonSource(
      
    //   id: "pickup-source",
    //   data: jsonEncode(pickupPoint.toJson()),
    // ));
    await mapboxMap!.style.addLayer(SymbolLayer(
      id: "pickup-layer",
      sourceId: "pickup-source",
      iconImage: "custom-icon", // Use the custom icon
      iconSize: 1.5,
      iconAnchor: IconAnchor.CENTER,
      iconRotationAlignment: IconRotationAlignment.AUTO,
    ));
    // Add destination point
    await mapboxMap!.style.addSource(GeoJsonSource(
      id: "destination-source",
      data: jsonEncode(destinationPoint.toJson()),
    ));
    await mapboxMap!.style.addLayer(SymbolLayer(
      id: "destination-layer",
      sourceId: "destination-source",
      iconImage: "custom-icon", // Use the custom icon
      iconSize: 1.5,
    ));

    // Get the route from Mapbox Directions API
    final response = await http.get(Uri.parse(
        'https://api.mapbox.com/directions/v5/mapbox/driving/${pickupPoint.coordinates.lng},${pickupPoint.coordinates.lat};${destinationPoint.coordinates.lng},${destinationPoint.coordinates.lat}?geometries=geojson&access_token=$mapboxToken'));

    if (response.statusCode == 200) {
      final routeData = jsonDecode(response.body);
      final routeGeometry = routeData['routes'][0]['geometry'];

      // Add route line
      await mapboxMap!.style.addSource(GeoJsonSource(
        id: "route-source",
        data: jsonEncode(routeGeometry),
      ));
      await mapboxMap!.style.addLayer(LineLayer(
        id: "route-layer",
        sourceId: "route-source",
        lineColor: Colors.blue.value,
        lineWidth: 3,
      ));

      // Calculate distance
      double distance =
          routeData['routes'][0]['distance'] / 1000; // Convert to km
      print('Distance:_____________________ $distance km');
      // Show distance
      notifyListeners();
    } else {
      print('Failed to get route: ${response.statusCode}');
    }
  }
}
